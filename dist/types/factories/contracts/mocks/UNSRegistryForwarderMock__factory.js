"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UNSRegistryForwarderMock__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint8",
                name: "version",
                type: "uint8",
            },
        ],
        name: "Initialized",
        type: "event",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "from",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct IForwarder.ForwardRequest",
                name: "req",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "execute",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "nonceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "from",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                ],
                internalType: "struct IForwarder.ForwardRequest",
                name: "req",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "verify",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610ceb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631bf7e13e146100515780636ccbae5f1461007a5780638129fc1c146100a8578063a4247400146100b2575b600080fd5b61006461005f36600461094e565b6100d5565b6040516100719190610a9e565b60405180910390f35b61009a6100883660046109e6565b60009081526035602052604090205490565b604051908152602001610071565b6100b06101e5565b005b6100c56100c036600461094e565b6102f6565b6040519015158152602001610071565b606060005a90506100e78585856102f6565b6101485760405162461bcd60e51b815260206004820152602760248201527f554e535265676973747279466f727761726465723a205349474e41545552455f6044820152661253959053125160ca1b60648201526084015b60405180910390fd5b6101da610158602087018761091c565b3060408801358461016c60608b018b610afc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061034992505050565b9150505b9392505050565b600054610100900460ff16158080156102055750600054600160ff909116105b8061021f5750303b15801561021f575060005460ff166001145b6102825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161013f565b6000805460ff1916600117905580156102a5576000805461ff0019166101001790555b6102ad610438565b80156102f3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600061034161030485610bdf565b3085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061046992505050565b949350505050565b6060610354856105c1565b600080876001600160a01b03168661036e8b8a89896105ed565b60405161037b9190610a2a565b60006040518083038160008787f1925050503d80600081146103b9576040519150601f19603f3d011682016040523d82523d6000602084013e6103be565b606091505b5090925090506103cf603f87610bbf565b5a116103eb57634e487b7160e01b600052600160045260246000fd5b61042b82826040518060400160405280601a81526020017f42617365466f727761726465723a2043414c4c5f4641494c454400000000000081525061061d565b9998505050505050505050565b600054610100900460ff1661045f5760405162461bcd60e51b815260040161013f90610ab1565b610467610656565b565b6040838101519051636ccbae5f60e01b8152600481019190915260009081903090636ccbae5f9060240160206040518083038186803b1580156104ab57600080fd5b505afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190610936565b905060006105918660600151805190602001208688602001516040516020016105319392919092835260609190911b6bffffffffffffffffffffffff19166020830152603482015260540190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90508186602001511480156105b7575085516105b7906001600160a01b0316828661067d565b9695505050505050565b6000818152603560205260409020546105db906001610b9b565b60009182526035602052604090912055565b606082858560405160200161060493929190610a46565b6040516020818303038152906040529050949350505050565b6060831561062c5750816101de565b82511561063c5782518084602001fd5b8160405162461bcd60e51b815260040161013f9190610a9e565b600054610100900460ff166104675760405162461bcd60e51b815260040161013f90610ab1565b600080600061068c85856107cd565b909250905060008160048111156106b357634e487b7160e01b600052602160045260246000fd5b1480156106d15750856001600160a01b0316826001600160a01b0316145b156106e1576001925050506101de565b600080876001600160a01b0316631626ba7e60e01b8888604051602401610709929190610a85565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516107479190610a2a565b600060405180830381855afa9150503d8060008114610782576040519150601f19603f3d011682016040523d82523d6000602084013e610787565b606091505b509150915081801561079a575080516020145b80156107c157508051630b135d3f60e11b906107bf9083016020908101908401610936565b145b98975050505050505050565b6000808251604114156108045760208301516040840151606085015160001a6107f887828585610813565b9450945050505061080c565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561084a57506000905060036108f7565b8460ff16601b1415801561086257508460ff16601c14155b1561087357506000905060046108f7565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156108c7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166108f0576000600192509250506108f7565b9150600090505b94509492505050565b80356001600160a01b038116811461091757600080fd5b919050565b60006020828403121561092d578081fd5b6101de82610900565b600060208284031215610947578081fd5b5051919050565b600080600060408486031215610962578182fd5b833567ffffffffffffffff80821115610979578384fd5b908501906080828803121561098c578384fd5b909350602085013590808211156109a1578384fd5b818601915086601f8301126109b4578384fd5b8135818111156109c2578485fd5b8760208285010111156109d3578485fd5b6020830194508093505050509250925092565b6000602082840312156109f7578081fd5b5035919050565b60008151808452610a16816020860160208601610c98565b601f01601f19169290920160200192915050565b60008251610a3c818460208701610c98565b9190910192915050565b60008451610a58818460208901610c98565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b82815260406020820152600061034160408301846109fe565b6020815260006101de60208301846109fe565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000808335601e19843603018112610b12578283fd5b83018035915067ffffffffffffffff821115610b2c578283fd5b60200191503681900382131561080c57600080fd5b6040516080810167ffffffffffffffff81118282101715610b6457610b64610cc8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b9357610b93610cc8565b604052919050565b60008219821115610bba57634e487b7160e01b81526011600452602481fd5b500190565b600082610bda57634e487b7160e01b81526012600452602481fd5b500490565b600060808236031215610bf0578081fd5b610bf8610b41565b610c0183610900565b81526020808401358183015260408401356040830152606084013567ffffffffffffffff80821115610c31578485fd5b9085019036601f830112610c43578485fd5b813581811115610c5557610c55610cc8565b610c67601f8201601f19168501610b6a565b91508082523684828501011115610c7c578586fd5b8084840185840137810190920193909352606082015292915050565b60005b83811015610cb3578181015183820152602001610c9b565b83811115610cc2576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000804000a";
const isSuperArgs = (xs) => xs.length > 1;
class UNSRegistryForwarderMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.UNSRegistryForwarderMock__factory = UNSRegistryForwarderMock__factory;
UNSRegistryForwarderMock__factory.bytecode = _bytecode;
UNSRegistryForwarderMock__factory.abi = _abi;
